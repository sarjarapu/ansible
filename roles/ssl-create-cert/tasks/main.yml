---

- name: find the sign requests and create the certificates using the rootCA
  find:
    paths: "{{ssl_folder}}/sign_requests"
    patterns: '*.csr'
  register: requests

- name: for each file create the 
  become: true
  shell: "openssl x509 -req -in {{item.path}} -CA {{ssl_public_crt}} -CAkey {{ssl_private_key}}  -CAcreateserial -out {{ssl_sign_cert}} -days 365"
  vars:
    ssl_sign_cert: "{{item.path | regex_replace('sign_requests', 'public') | regex_replace('csr$', 'crt')}}"
  with_items: "{{requests.files}}"

# - name: check if  {{ssl_csr_file}} file already exists
#   stat: 
#     path: "{{ssl_csr_file}}"
#   register: check_csr_file

# - block:
    
#   - name: create crt, private and csr folders at /etc/ssl
#     become: true
#     file:
#       state: directory
#       path: "{{ssl_folder}}/{{ item }}"
#       mode: 0755
#     with_items:
#       - public
#       - private
#       - csr

#   - name: create a private key for file mongodb.key
#     become: true
#     shell: "openssl genrsa -out {{ssl_private_key}} 4096 creates={{ssl_private_key}}"

#   - name: set the mode to readonly just for root
#     become: true
#     file:
#       state: file
#       path: "{{ssl_private_key}}"
#       mode: 0400

#   - name: create a certificate signing request file mongodb.csr
#     become: true
#     shell: "openssl req -new -key {{ssl_private_key}} -out {{ssl_csr_file}} -subj '{{cn_prefix}}/CN={{private_dns}}'"

#   when: check_csr_file.stat.exists == False

# - name: download the csr file to local
#   fetch:
#     src: "{{ssl_csr_file}}"
#     dest: "/tmp/csr/{{private_dns}}.csr"
#     flat: yes